(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{13:function(e,n,a){a(14),e.exports=a(41)},39:function(e,n,a){var t={"./slides.md":40};function l(e){var n=r(e);return a(n)}function r(e){if(!a.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}l.keys=function(){return Object.keys(t)},l.resolve=r,e.exports=l,l.id=39},40:function(e,n,a){"use strict";a.r(n),a.d(n,"slides",(function(){return i})),a.d(n,"fusumaProps",(function(){return o})),a.d(n,"default",(function(){return m}));var t=a(2),l=a.n(t),r=a(1);function u(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}function c(){return(c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}var i=[function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Poll based futures in Rust"),Object(r.a)("h2",null,"Max Bruckner"))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Callbacks"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void download(\n    std::string url,\n    std::function<void(std::vector<std::byte>)> callback\n);\n")))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Callbacks"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void download(\n    std::string url,\n    std::function<void(std::vector<std::byte>)> callback\n);\n")),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'void play_song(std::vector<std::byte> song);\n\ndownload(\n    "https://example.com/song.opus",\n    [](auto song) {\n        play_song(song);\n    });\n')))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Komplexeres Beispiel"),Object(r.a)("h2",null,"1. Bild herunterladen."),Object(r.a)("h2",null,"2. Konvertieren"),Object(r.a)("h2",null,"3. Wieder hochladen"))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Callbacks (komplexes Beispiel)"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'download(\n    "https://example.com/image.png"\n    [](auto image) {\n        convert(\n            image,\n            [](auto converted_image) {\n                upload(\n                    converted_image,\n                    "https://example.com/image.webp",\n                    []() {\n                        // ...\n                    });\n            });\n    });\n')))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Future (aka Promise)"),Object(r.a)("h2",null,"Repräsentiert zukünftiges Ergebnis"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Async IO")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Arbeit auf anderem Thread")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Kombinatoren")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Timer"))))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Beispiel"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),'download("https://example.com/image.png")\n    .and_then(|image| convert(image)) // redundant closure, I know\n    .and_then(|converted_image|\n        upload(converted_image, "https://example.com/image.webp"))\n    .map(|()| /* ... */ )\n')))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Async/Await"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),'let image = download("https://example.com/image.png").await;\nlet converted_image = convert(image).await;\nupload(converted_image, "https://example.com/image.webp").await;\n/* ... */\n')))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Typische Implementierung"),Object(r.a)("p",null,"Serviervorschlag"),Object(r.a)("p",null,"Sugar free!"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"template <typename Result, typename Arguments>\nstruct Future {\n    void start(Arguments arguments);\n    void schedule(std::function<void(Result)> action);\n    /* ... */\n}\n")),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"upload_future.schedule([]() { /* ... */});\nconversion_future.schedule([](auto converted_image) {\n    upload_future.start(converted_image);\n});\ndownload_future.schedule([](auto image) {\n    conversion_future.start(image);\n});\ndownload_future.start(url);\n")))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Schwierigkeiten"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Cancelation")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Thread-Synchronisierung")," (Wo setze ich fort)"),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Heap-Allokationen schwer vermeidbar"))))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"std::future::Future"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),"pub trait Future {\n    type Output;\n\n    fn poll(self: Pin<&mut Self>, cx: &mut Context)\n        -> Poll<Self::Output>;\n}\n")),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),"pub enum Poll<T> {\n    Ready(T),\n    Pending,\n}\n")))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Beispiel: Async IO"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),"fn poll(&mut self, waker: &Waker) -> Poll<Vec<u8>> {\n    if not_started {\n        syscall(|result| {\n            self.is_finished = true;\n            self.result = result;\n            waker.wake();\n        });\n        return Pending;\n    }\n\n    if self.is_finished {\n        return Ready(self.result);\n    } else {\n        return Pending;\n    }\n}\n")))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Unser Beispiel"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),"download(download_url)\n    .and_then(|image| convert(image))\n    .and_then(|converted_image| upload(converted_image, upload_url))\n    .map(|()| /* ... */ )\n")),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),"let image = download(download_url).await;\nlet converted_image = convert(image).await;\nupload(converted_image, upload_url).await;\n/* ... */\n")))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Intern (so ungefähr)"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),"enum ImageChain {\n    Downloading(DownloadFuture),\n    Converting(ConversionFuture),\n    Uploading(UploadFuture),\n    Finished,\n}\n")))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Intern (so ungefähr)"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),'fn poll(&mut self, waker: &Waker) -> Poll<()> {\n    match self {\n        Downloading(download_future) => {\n            match download_future.poll(waker) {\n                Ready(image) => // transition to Converting,\n                Pending => return Pending, }, },\n        Converting(conversion_future) => {\n            match conversion_future.poll(waker) {\n                Ready(image) => // transition to Uploading,\n                Pending => return Pending, } },\n        Uploading(upload_future) => {\n            Ready(()) => /* ... */ // also transition to Finish.,\n            Pending => return Pending,\n        },\n        Finished => panic!("invalid"),\n    }\n}\n')))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Task (in der Regel)"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Arbeitseinheit aus vielen Teil-Futures")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Erhält callbacks über Waker")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Scheduling in Task-Queue")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Idr. als Einheit allokiert")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Pollt Top-Level-Future nach wakeup"))),Object(r.a)("h2",null,"Ist selbst eine Future"))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"In unserem Beispiel:"),Object(r.a)("h2",null,"Ein Task pro Bild-URL"),Object(r.a)("h2",null,"Futures für z.B."),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"TCP-Verbindung")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"TLS-Handshake")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Umrechnung")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"usw."))))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Fazit"),Object(r.a)("h2",null,"Cancelation"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Einfach nicht mehr pollen"))),Object(r.a)("h2",null,"Thread-Synchronisierung"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Nur wo wirklich nötig (e.g. nicht für Combinators)"))),Object(r.a)("h2",null,"Heap-Allokationen"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Meistens nur einmal pro Task"))),Object(r.a)("h2",null,"Und"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Compiler kann viel weg optimieren"))))},function(e){return Object(r.a)(l.a.Fragment,null,Object(r.a)("h1",null,"Quellen"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("a",c({parentName:"li"},{href:"https://www.youtube.com/watch?v=4QZ0-vIIFug"}),"RustFest Zürich 2017 - Tokio: How we hit 88mph by Alex Crichton")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("a",c({parentName:"li"},{href:"https://doc.rust-lang.org/std/future/trait.Future.html"}),"std::future::Future in der Rust Standardlibrary-Dokumentation")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("a",c({parentName:"li"},{href:"https://aturon.github.io/blog/2016/08/11/futures/"}),"Aaron Turon: Zero-cost futures in Rust"))),Object(r.a)("h1",null,"Tipp"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},"extundelete kann gelöschte Präsentationen wiederherstellen ...")))}],o=[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],s={slides:i},p="wrapper";function m(e){var n=e.components,a=u(e,["components"]);return Object(r.a)(p,c({},s,a,{components:n,mdxType:"MDXLayout"}),Object(r.a)("h1",null,"Poll based futures in Rust"),Object(r.a)("h2",null,"Max Bruckner"),Object(r.a)("hr",null),Object(r.a)("h1",null,"Callbacks"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void download(\n    std::string url,\n    std::function<void(std::vector<std::byte>)> callback\n);\n")),Object(r.a)("hr",null),Object(r.a)("h1",null,"Callbacks"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void download(\n    std::string url,\n    std::function<void(std::vector<std::byte>)> callback\n);\n")),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'void play_song(std::vector<std::byte> song);\n\ndownload(\n    "https://example.com/song.opus",\n    [](auto song) {\n        play_song(song);\n    });\n')),Object(r.a)("hr",null),Object(r.a)("h1",null,"Komplexeres Beispiel"),Object(r.a)("h2",null,"1. Bild herunterladen."),Object(r.a)("h2",null,"2. Konvertieren"),Object(r.a)("h2",null,"3. Wieder hochladen"),Object(r.a)("hr",null),Object(r.a)("h1",null,"Callbacks (komplexes Beispiel)"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'download(\n    "https://example.com/image.png"\n    [](auto image) {\n        convert(\n            image,\n            [](auto converted_image) {\n                upload(\n                    converted_image,\n                    "https://example.com/image.webp",\n                    []() {\n                        // ...\n                    });\n            });\n    });\n')),Object(r.a)("hr",null),Object(r.a)("h1",null,"Future (aka Promise)"),Object(r.a)("h2",null,"Repräsentiert zukünftiges Ergebnis"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Async IO")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Arbeit auf anderem Thread")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Kombinatoren")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Timer"))),Object(r.a)("hr",null),Object(r.a)("h1",null,"Beispiel"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),'download("https://example.com/image.png")\n    .and_then(|image| convert(image)) // redundant closure, I know\n    .and_then(|converted_image|\n        upload(converted_image, "https://example.com/image.webp"))\n    .map(|()| /* ... */ )\n')),Object(r.a)("hr",null),Object(r.a)("h1",null,"Async/Await"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),'let image = download("https://example.com/image.png").await;\nlet converted_image = convert(image).await;\nupload(converted_image, "https://example.com/image.webp").await;\n/* ... */\n')),Object(r.a)("hr",null),Object(r.a)("h1",null,"Typische Implementierung"),Object(r.a)("p",null,"Serviervorschlag"),Object(r.a)("p",null,"Sugar free!"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"template <typename Result, typename Arguments>\nstruct Future {\n    void start(Arguments arguments);\n    void schedule(std::function<void(Result)> action);\n    /* ... */\n}\n")),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"upload_future.schedule([]() { /* ... */});\nconversion_future.schedule([](auto converted_image) {\n    upload_future.start(converted_image);\n});\ndownload_future.schedule([](auto image) {\n    conversion_future.start(image);\n});\ndownload_future.start(url);\n")),Object(r.a)("hr",null),Object(r.a)("h1",null,"Schwierigkeiten"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Cancelation")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Thread-Synchronisierung")," (Wo setze ich fort)"),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Heap-Allokationen schwer vermeidbar"))),Object(r.a)("hr",null),Object(r.a)("h1",null,"std::future::Future"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),"pub trait Future {\n    type Output;\n\n    fn poll(self: Pin<&mut Self>, cx: &mut Context)\n        -> Poll<Self::Output>;\n}\n")),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),"pub enum Poll<T> {\n    Ready(T),\n    Pending,\n}\n")),Object(r.a)("hr",null),Object(r.a)("h1",null,"Beispiel: Async IO"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),"fn poll(&mut self, waker: &Waker) -> Poll<Vec<u8>> {\n    if not_started {\n        syscall(|result| {\n            self.is_finished = true;\n            self.result = result;\n            waker.wake();\n        });\n        return Pending;\n    }\n\n    if self.is_finished {\n        return Ready(self.result);\n    } else {\n        return Pending;\n    }\n}\n")),Object(r.a)("hr",null),Object(r.a)("h1",null,"Unser Beispiel"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),"download(download_url)\n    .and_then(|image| convert(image))\n    .and_then(|converted_image| upload(converted_image, upload_url))\n    .map(|()| /* ... */ )\n")),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),"let image = download(download_url).await;\nlet converted_image = convert(image).await;\nupload(converted_image, upload_url).await;\n/* ... */\n")),Object(r.a)("hr",null),Object(r.a)("h1",null,"Intern (so ungefähr)"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),"enum ImageChain {\n    Downloading(DownloadFuture),\n    Converting(ConversionFuture),\n    Uploading(UploadFuture),\n    Finished,\n}\n")),Object(r.a)("hr",null),Object(r.a)("h1",null,"Intern (so ungefähr)"),Object(r.a)("pre",null,Object(r.a)("code",c({parentName:"pre"},{className:"language-rust"}),'fn poll(&mut self, waker: &Waker) -> Poll<()> {\n    match self {\n        Downloading(download_future) => {\n            match download_future.poll(waker) {\n                Ready(image) => // transition to Converting,\n                Pending => return Pending, }, },\n        Converting(conversion_future) => {\n            match conversion_future.poll(waker) {\n                Ready(image) => // transition to Uploading,\n                Pending => return Pending, } },\n        Uploading(upload_future) => {\n            Ready(()) => /* ... */ // also transition to Finish.,\n            Pending => return Pending,\n        },\n        Finished => panic!("invalid"),\n    }\n}\n')),Object(r.a)("hr",null),Object(r.a)("h1",null,"Task (in der Regel)"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Arbeitseinheit aus vielen Teil-Futures")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Erhält callbacks über Waker")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Scheduling in Task-Queue")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Idr. als Einheit allokiert")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Pollt Top-Level-Future nach wakeup"))),Object(r.a)("h2",null,"Ist selbst eine Future"),Object(r.a)("hr",null),Object(r.a)("h1",null,"In unserem Beispiel:"),Object(r.a)("h2",null,"Ein Task pro Bild-URL"),Object(r.a)("h2",null,"Futures für z.B."),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"TCP-Verbindung")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"TLS-Handshake")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Umrechnung")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"usw."))),Object(r.a)("hr",null),Object(r.a)("h1",null,"Fazit"),Object(r.a)("h2",null,"Cancelation"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Einfach nicht mehr pollen"))),Object(r.a)("h2",null,"Thread-Synchronisierung"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Nur wo wirklich nötig (e.g. nicht für Combinators)"))),Object(r.a)("h2",null,"Heap-Allokationen"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Meistens nur einmal pro Task"))),Object(r.a)("h2",null,"Und"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("strong",{parentName:"li"},"Compiler kann viel weg optimieren"))),Object(r.a)("hr",null),Object(r.a)("h1",null,"Quellen"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},Object(r.a)("a",c({parentName:"li"},{href:"https://www.youtube.com/watch?v=4QZ0-vIIFug"}),"RustFest Zürich 2017 - Tokio: How we hit 88mph by Alex Crichton")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("a",c({parentName:"li"},{href:"https://doc.rust-lang.org/std/future/trait.Future.html"}),"std::future::Future in der Rust Standardlibrary-Dokumentation")),Object(r.a)("li",{parentName:"ul"},Object(r.a)("a",c({parentName:"li"},{href:"https://aturon.github.io/blog/2016/08/11/futures/"}),"Aaron Turon: Zero-cost futures in Rust"))),Object(r.a)("h1",null,"Tipp"),Object(r.a)("ul",null,Object(r.a)("li",{parentName:"ul"},"extundelete kann gelöschte Präsentationen wiederherstellen ...")))}m.isMDXComponent=!0}},[[13,6,7]],[1,9]]);